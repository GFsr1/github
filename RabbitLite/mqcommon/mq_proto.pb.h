// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mq_5fproto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mq_5fproto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "mq_msg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mq_5fproto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mq_5fproto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mq_5fproto_2eproto;
namespace zkpmq {
class basicAckRequest;
class basicAckRequestDefaultTypeInternal;
extern basicAckRequestDefaultTypeInternal _basicAckRequest_default_instance_;
class basicCancelRequest;
class basicCancelRequestDefaultTypeInternal;
extern basicCancelRequestDefaultTypeInternal _basicCancelRequest_default_instance_;
class basicCommonResponse;
class basicCommonResponseDefaultTypeInternal;
extern basicCommonResponseDefaultTypeInternal _basicCommonResponse_default_instance_;
class basicConsumeRequest;
class basicConsumeRequestDefaultTypeInternal;
extern basicConsumeRequestDefaultTypeInternal _basicConsumeRequest_default_instance_;
class basicConsumeResponse;
class basicConsumeResponseDefaultTypeInternal;
extern basicConsumeResponseDefaultTypeInternal _basicConsumeResponse_default_instance_;
class basicPublishRequest;
class basicPublishRequestDefaultTypeInternal;
extern basicPublishRequestDefaultTypeInternal _basicPublishRequest_default_instance_;
class closeChannelRequest;
class closeChannelRequestDefaultTypeInternal;
extern closeChannelRequestDefaultTypeInternal _closeChannelRequest_default_instance_;
class declareExchangeRequest;
class declareExchangeRequestDefaultTypeInternal;
extern declareExchangeRequestDefaultTypeInternal _declareExchangeRequest_default_instance_;
class declareExchangeRequest_ArgsEntry_DoNotUse;
class declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal;
extern declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal _declareExchangeRequest_ArgsEntry_DoNotUse_default_instance_;
class declareQueueRequest;
class declareQueueRequestDefaultTypeInternal;
extern declareQueueRequestDefaultTypeInternal _declareQueueRequest_default_instance_;
class declareQueueRequest_ArgsEntry_DoNotUse;
class declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal;
extern declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal _declareQueueRequest_ArgsEntry_DoNotUse_default_instance_;
class deleteExchangeRequest;
class deleteExchangeRequestDefaultTypeInternal;
extern deleteExchangeRequestDefaultTypeInternal _deleteExchangeRequest_default_instance_;
class deleteQueueRequest;
class deleteQueueRequestDefaultTypeInternal;
extern deleteQueueRequestDefaultTypeInternal _deleteQueueRequest_default_instance_;
class openChannelRequest;
class openChannelRequestDefaultTypeInternal;
extern openChannelRequestDefaultTypeInternal _openChannelRequest_default_instance_;
class queueBindRequest;
class queueBindRequestDefaultTypeInternal;
extern queueBindRequestDefaultTypeInternal _queueBindRequest_default_instance_;
class queueUnBindRequest;
class queueUnBindRequestDefaultTypeInternal;
extern queueUnBindRequestDefaultTypeInternal _queueUnBindRequest_default_instance_;
}  // namespace zkpmq
PROTOBUF_NAMESPACE_OPEN
template<> ::zkpmq::basicAckRequest* Arena::CreateMaybeMessage<::zkpmq::basicAckRequest>(Arena*);
template<> ::zkpmq::basicCancelRequest* Arena::CreateMaybeMessage<::zkpmq::basicCancelRequest>(Arena*);
template<> ::zkpmq::basicCommonResponse* Arena::CreateMaybeMessage<::zkpmq::basicCommonResponse>(Arena*);
template<> ::zkpmq::basicConsumeRequest* Arena::CreateMaybeMessage<::zkpmq::basicConsumeRequest>(Arena*);
template<> ::zkpmq::basicConsumeResponse* Arena::CreateMaybeMessage<::zkpmq::basicConsumeResponse>(Arena*);
template<> ::zkpmq::basicPublishRequest* Arena::CreateMaybeMessage<::zkpmq::basicPublishRequest>(Arena*);
template<> ::zkpmq::closeChannelRequest* Arena::CreateMaybeMessage<::zkpmq::closeChannelRequest>(Arena*);
template<> ::zkpmq::declareExchangeRequest* Arena::CreateMaybeMessage<::zkpmq::declareExchangeRequest>(Arena*);
template<> ::zkpmq::declareExchangeRequest_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::zkpmq::declareExchangeRequest_ArgsEntry_DoNotUse>(Arena*);
template<> ::zkpmq::declareQueueRequest* Arena::CreateMaybeMessage<::zkpmq::declareQueueRequest>(Arena*);
template<> ::zkpmq::declareQueueRequest_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::zkpmq::declareQueueRequest_ArgsEntry_DoNotUse>(Arena*);
template<> ::zkpmq::deleteExchangeRequest* Arena::CreateMaybeMessage<::zkpmq::deleteExchangeRequest>(Arena*);
template<> ::zkpmq::deleteQueueRequest* Arena::CreateMaybeMessage<::zkpmq::deleteQueueRequest>(Arena*);
template<> ::zkpmq::openChannelRequest* Arena::CreateMaybeMessage<::zkpmq::openChannelRequest>(Arena*);
template<> ::zkpmq::queueBindRequest* Arena::CreateMaybeMessage<::zkpmq::queueBindRequest>(Arena*);
template<> ::zkpmq::queueUnBindRequest* Arena::CreateMaybeMessage<::zkpmq::queueUnBindRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zkpmq {

// ===================================================================

class openChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.openChannelRequest) */ {
 public:
  inline openChannelRequest() : openChannelRequest(nullptr) {};
  virtual ~openChannelRequest();

  openChannelRequest(const openChannelRequest& from);
  openChannelRequest(openChannelRequest&& from) noexcept
    : openChannelRequest() {
    *this = ::std::move(from);
  }

  inline openChannelRequest& operator=(const openChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline openChannelRequest& operator=(openChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const openChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const openChannelRequest* internal_default_instance() {
    return reinterpret_cast<const openChannelRequest*>(
               &_openChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(openChannelRequest& a, openChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(openChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(openChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline openChannelRequest* New() const final {
    return CreateMaybeMessage<openChannelRequest>(nullptr);
  }

  openChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<openChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const openChannelRequest& from);
  void MergeFrom(const openChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(openChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.openChannelRequest";
  }
  protected:
  explicit openChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.openChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class closeChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.closeChannelRequest) */ {
 public:
  inline closeChannelRequest() : closeChannelRequest(nullptr) {};
  virtual ~closeChannelRequest();

  closeChannelRequest(const closeChannelRequest& from);
  closeChannelRequest(closeChannelRequest&& from) noexcept
    : closeChannelRequest() {
    *this = ::std::move(from);
  }

  inline closeChannelRequest& operator=(const closeChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline closeChannelRequest& operator=(closeChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const closeChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const closeChannelRequest* internal_default_instance() {
    return reinterpret_cast<const closeChannelRequest*>(
               &_closeChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(closeChannelRequest& a, closeChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(closeChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(closeChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline closeChannelRequest* New() const final {
    return CreateMaybeMessage<closeChannelRequest>(nullptr);
  }

  closeChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<closeChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const closeChannelRequest& from);
  void MergeFrom(const closeChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(closeChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.closeChannelRequest";
  }
  protected:
  explicit closeChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.closeChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class declareExchangeRequest_ArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<declareExchangeRequest_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<declareExchangeRequest_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  declareExchangeRequest_ArgsEntry_DoNotUse();
  declareExchangeRequest_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const declareExchangeRequest_ArgsEntry_DoNotUse& other);
  static const declareExchangeRequest_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const declareExchangeRequest_ArgsEntry_DoNotUse*>(&_declareExchangeRequest_ArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkpmq.declareExchangeRequest.ArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkpmq.declareExchangeRequest.ArgsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class declareExchangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.declareExchangeRequest) */ {
 public:
  inline declareExchangeRequest() : declareExchangeRequest(nullptr) {};
  virtual ~declareExchangeRequest();

  declareExchangeRequest(const declareExchangeRequest& from);
  declareExchangeRequest(declareExchangeRequest&& from) noexcept
    : declareExchangeRequest() {
    *this = ::std::move(from);
  }

  inline declareExchangeRequest& operator=(const declareExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline declareExchangeRequest& operator=(declareExchangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const declareExchangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const declareExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const declareExchangeRequest*>(
               &_declareExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(declareExchangeRequest& a, declareExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(declareExchangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(declareExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline declareExchangeRequest* New() const final {
    return CreateMaybeMessage<declareExchangeRequest>(nullptr);
  }

  declareExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<declareExchangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const declareExchangeRequest& from);
  void MergeFrom(const declareExchangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(declareExchangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.declareExchangeRequest";
  }
  protected:
  explicit declareExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 7,
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
    kExchangeTypeFieldNumber = 4,
    kDurableFieldNumber = 5,
    kAutoDeleteFieldNumber = 6,
  };
  // map<string, string> args = 7;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_args();

  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_name(
      std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // .zkpmq.ExchangeType exchange_type = 4;
  void clear_exchange_type();
  ::zkpmq::ExchangeType exchange_type() const;
  void set_exchange_type(::zkpmq::ExchangeType value);
  private:
  ::zkpmq::ExchangeType _internal_exchange_type() const;
  void _internal_set_exchange_type(::zkpmq::ExchangeType value);
  public:

  // bool durable = 5;
  void clear_durable();
  bool durable() const;
  void set_durable(bool value);
  private:
  bool _internal_durable() const;
  void _internal_set_durable(bool value);
  public:

  // bool auto_delete = 6;
  void clear_auto_delete();
  bool auto_delete() const;
  void set_auto_delete(bool value);
  private:
  bool _internal_auto_delete() const;
  void _internal_set_auto_delete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.declareExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      declareExchangeRequest_ArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  int exchange_type_;
  bool durable_;
  bool auto_delete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class deleteExchangeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.deleteExchangeRequest) */ {
 public:
  inline deleteExchangeRequest() : deleteExchangeRequest(nullptr) {};
  virtual ~deleteExchangeRequest();

  deleteExchangeRequest(const deleteExchangeRequest& from);
  deleteExchangeRequest(deleteExchangeRequest&& from) noexcept
    : deleteExchangeRequest() {
    *this = ::std::move(from);
  }

  inline deleteExchangeRequest& operator=(const deleteExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteExchangeRequest& operator=(deleteExchangeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const deleteExchangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const deleteExchangeRequest*>(
               &_deleteExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(deleteExchangeRequest& a, deleteExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteExchangeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteExchangeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deleteExchangeRequest* New() const final {
    return CreateMaybeMessage<deleteExchangeRequest>(nullptr);
  }

  deleteExchangeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deleteExchangeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const deleteExchangeRequest& from);
  void MergeFrom(const deleteExchangeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteExchangeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.deleteExchangeRequest";
  }
  protected:
  explicit deleteExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_name(
      std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.deleteExchangeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class declareQueueRequest_ArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<declareQueueRequest_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<declareQueueRequest_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  declareQueueRequest_ArgsEntry_DoNotUse();
  declareQueueRequest_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const declareQueueRequest_ArgsEntry_DoNotUse& other);
  static const declareQueueRequest_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const declareQueueRequest_ArgsEntry_DoNotUse*>(&_declareQueueRequest_ArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkpmq.declareQueueRequest.ArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "zkpmq.declareQueueRequest.ArgsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class declareQueueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.declareQueueRequest) */ {
 public:
  inline declareQueueRequest() : declareQueueRequest(nullptr) {};
  virtual ~declareQueueRequest();

  declareQueueRequest(const declareQueueRequest& from);
  declareQueueRequest(declareQueueRequest&& from) noexcept
    : declareQueueRequest() {
    *this = ::std::move(from);
  }

  inline declareQueueRequest& operator=(const declareQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline declareQueueRequest& operator=(declareQueueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const declareQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const declareQueueRequest* internal_default_instance() {
    return reinterpret_cast<const declareQueueRequest*>(
               &_declareQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(declareQueueRequest& a, declareQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(declareQueueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(declareQueueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline declareQueueRequest* New() const final {
    return CreateMaybeMessage<declareQueueRequest>(nullptr);
  }

  declareQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<declareQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const declareQueueRequest& from);
  void MergeFrom(const declareQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(declareQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.declareQueueRequest";
  }
  protected:
  explicit declareQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 7,
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kQueueNameFieldNumber = 3,
    kExclusiveFieldNumber = 4,
    kDurableFieldNumber = 5,
    kAutoDeleteFieldNumber = 6,
  };
  // map<string, string> args = 7;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_args();

  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string queue_name = 3;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // bool exclusive = 4;
  void clear_exclusive();
  bool exclusive() const;
  void set_exclusive(bool value);
  private:
  bool _internal_exclusive() const;
  void _internal_set_exclusive(bool value);
  public:

  // bool durable = 5;
  void clear_durable();
  bool durable() const;
  void set_durable(bool value);
  private:
  bool _internal_durable() const;
  void _internal_set_durable(bool value);
  public:

  // bool auto_delete = 6;
  void clear_auto_delete();
  bool auto_delete() const;
  void set_auto_delete(bool value);
  private:
  bool _internal_auto_delete() const;
  void _internal_set_auto_delete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.declareQueueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      declareQueueRequest_ArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  bool exclusive_;
  bool durable_;
  bool auto_delete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class deleteQueueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.deleteQueueRequest) */ {
 public:
  inline deleteQueueRequest() : deleteQueueRequest(nullptr) {};
  virtual ~deleteQueueRequest();

  deleteQueueRequest(const deleteQueueRequest& from);
  deleteQueueRequest(deleteQueueRequest&& from) noexcept
    : deleteQueueRequest() {
    *this = ::std::move(from);
  }

  inline deleteQueueRequest& operator=(const deleteQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline deleteQueueRequest& operator=(deleteQueueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const deleteQueueRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const deleteQueueRequest* internal_default_instance() {
    return reinterpret_cast<const deleteQueueRequest*>(
               &_deleteQueueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(deleteQueueRequest& a, deleteQueueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(deleteQueueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(deleteQueueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline deleteQueueRequest* New() const final {
    return CreateMaybeMessage<deleteQueueRequest>(nullptr);
  }

  deleteQueueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<deleteQueueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const deleteQueueRequest& from);
  void MergeFrom(const deleteQueueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(deleteQueueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.deleteQueueRequest";
  }
  protected:
  explicit deleteQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kQueueNameFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string queue_name = 3;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.deleteQueueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class queueBindRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.queueBindRequest) */ {
 public:
  inline queueBindRequest() : queueBindRequest(nullptr) {};
  virtual ~queueBindRequest();

  queueBindRequest(const queueBindRequest& from);
  queueBindRequest(queueBindRequest&& from) noexcept
    : queueBindRequest() {
    *this = ::std::move(from);
  }

  inline queueBindRequest& operator=(const queueBindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queueBindRequest& operator=(queueBindRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queueBindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queueBindRequest* internal_default_instance() {
    return reinterpret_cast<const queueBindRequest*>(
               &_queueBindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(queueBindRequest& a, queueBindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queueBindRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queueBindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queueBindRequest* New() const final {
    return CreateMaybeMessage<queueBindRequest>(nullptr);
  }

  queueBindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queueBindRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queueBindRequest& from);
  void MergeFrom(const queueBindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queueBindRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.queueBindRequest";
  }
  protected:
  explicit queueBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
    kQueueNameFieldNumber = 4,
    kBindingKeyFieldNumber = 5,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_name(
      std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // string queue_name = 4;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string binding_key = 5;
  void clear_binding_key();
  const std::string& binding_key() const;
  void set_binding_key(const std::string& value);
  void set_binding_key(std::string&& value);
  void set_binding_key(const char* value);
  void set_binding_key(const char* value, size_t size);
  std::string* mutable_binding_key();
  std::string* release_binding_key();
  void set_allocated_binding_key(std::string* binding_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_binding_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_binding_key(
      std::string* binding_key);
  private:
  const std::string& _internal_binding_key() const;
  void _internal_set_binding_key(const std::string& value);
  std::string* _internal_mutable_binding_key();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.queueBindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binding_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class queueUnBindRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.queueUnBindRequest) */ {
 public:
  inline queueUnBindRequest() : queueUnBindRequest(nullptr) {};
  virtual ~queueUnBindRequest();

  queueUnBindRequest(const queueUnBindRequest& from);
  queueUnBindRequest(queueUnBindRequest&& from) noexcept
    : queueUnBindRequest() {
    *this = ::std::move(from);
  }

  inline queueUnBindRequest& operator=(const queueUnBindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline queueUnBindRequest& operator=(queueUnBindRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const queueUnBindRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const queueUnBindRequest* internal_default_instance() {
    return reinterpret_cast<const queueUnBindRequest*>(
               &_queueUnBindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(queueUnBindRequest& a, queueUnBindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(queueUnBindRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(queueUnBindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline queueUnBindRequest* New() const final {
    return CreateMaybeMessage<queueUnBindRequest>(nullptr);
  }

  queueUnBindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<queueUnBindRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const queueUnBindRequest& from);
  void MergeFrom(const queueUnBindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(queueUnBindRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.queueUnBindRequest";
  }
  protected:
  explicit queueUnBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
    kQueueNameFieldNumber = 4,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_name(
      std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // string queue_name = 4;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.queueUnBindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicPublishRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicPublishRequest) */ {
 public:
  inline basicPublishRequest() : basicPublishRequest(nullptr) {};
  virtual ~basicPublishRequest();

  basicPublishRequest(const basicPublishRequest& from);
  basicPublishRequest(basicPublishRequest&& from) noexcept
    : basicPublishRequest() {
    *this = ::std::move(from);
  }

  inline basicPublishRequest& operator=(const basicPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicPublishRequest& operator=(basicPublishRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicPublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicPublishRequest* internal_default_instance() {
    return reinterpret_cast<const basicPublishRequest*>(
               &_basicPublishRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(basicPublishRequest& a, basicPublishRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(basicPublishRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicPublishRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicPublishRequest* New() const final {
    return CreateMaybeMessage<basicPublishRequest>(nullptr);
  }

  basicPublishRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicPublishRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicPublishRequest& from);
  void MergeFrom(const basicPublishRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicPublishRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicPublishRequest";
  }
  protected:
  explicit basicPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kExchangeNameFieldNumber = 3,
    kBodyFieldNumber = 4,
    kPropertiesFieldNumber = 5,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string exchange_name = 3;
  void clear_exchange_name();
  const std::string& exchange_name() const;
  void set_exchange_name(const std::string& value);
  void set_exchange_name(std::string&& value);
  void set_exchange_name(const char* value);
  void set_exchange_name(const char* value, size_t size);
  std::string* mutable_exchange_name();
  std::string* release_exchange_name();
  void set_allocated_exchange_name(std::string* exchange_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_name(
      std::string* exchange_name);
  private:
  const std::string& _internal_exchange_name() const;
  void _internal_set_exchange_name(const std::string& value);
  std::string* _internal_mutable_exchange_name();
  public:

  // string body = 4;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .zkpmq.BasicProperties properties = 5;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::zkpmq::BasicProperties& properties() const;
  ::zkpmq::BasicProperties* release_properties();
  ::zkpmq::BasicProperties* mutable_properties();
  void set_allocated_properties(::zkpmq::BasicProperties* properties);
  private:
  const ::zkpmq::BasicProperties& _internal_properties() const;
  ::zkpmq::BasicProperties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::zkpmq::BasicProperties* properties);
  ::zkpmq::BasicProperties* unsafe_arena_release_properties();

  // @@protoc_insertion_point(class_scope:zkpmq.basicPublishRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::zkpmq::BasicProperties* properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicAckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicAckRequest) */ {
 public:
  inline basicAckRequest() : basicAckRequest(nullptr) {};
  virtual ~basicAckRequest();

  basicAckRequest(const basicAckRequest& from);
  basicAckRequest(basicAckRequest&& from) noexcept
    : basicAckRequest() {
    *this = ::std::move(from);
  }

  inline basicAckRequest& operator=(const basicAckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicAckRequest& operator=(basicAckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicAckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicAckRequest* internal_default_instance() {
    return reinterpret_cast<const basicAckRequest*>(
               &_basicAckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(basicAckRequest& a, basicAckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(basicAckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicAckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicAckRequest* New() const final {
    return CreateMaybeMessage<basicAckRequest>(nullptr);
  }

  basicAckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicAckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicAckRequest& from);
  void MergeFrom(const basicAckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicAckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicAckRequest";
  }
  protected:
  explicit basicAckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kQueueNameFieldNumber = 3,
    kMessageIdFieldNumber = 4,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string queue_name = 3;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // string message_id = 4;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.basicAckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicConsumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicConsumeRequest) */ {
 public:
  inline basicConsumeRequest() : basicConsumeRequest(nullptr) {};
  virtual ~basicConsumeRequest();

  basicConsumeRequest(const basicConsumeRequest& from);
  basicConsumeRequest(basicConsumeRequest&& from) noexcept
    : basicConsumeRequest() {
    *this = ::std::move(from);
  }

  inline basicConsumeRequest& operator=(const basicConsumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicConsumeRequest& operator=(basicConsumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicConsumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicConsumeRequest* internal_default_instance() {
    return reinterpret_cast<const basicConsumeRequest*>(
               &_basicConsumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(basicConsumeRequest& a, basicConsumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(basicConsumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicConsumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicConsumeRequest* New() const final {
    return CreateMaybeMessage<basicConsumeRequest>(nullptr);
  }

  basicConsumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicConsumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicConsumeRequest& from);
  void MergeFrom(const basicConsumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicConsumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicConsumeRequest";
  }
  protected:
  explicit basicConsumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kConsumerTagFieldNumber = 3,
    kQueueNameFieldNumber = 4,
    kAutoAckFieldNumber = 5,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string consumer_tag = 3;
  void clear_consumer_tag();
  const std::string& consumer_tag() const;
  void set_consumer_tag(const std::string& value);
  void set_consumer_tag(std::string&& value);
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  std::string* mutable_consumer_tag();
  std::string* release_consumer_tag();
  void set_allocated_consumer_tag(std::string* consumer_tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consumer_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consumer_tag(
      std::string* consumer_tag);
  private:
  const std::string& _internal_consumer_tag() const;
  void _internal_set_consumer_tag(const std::string& value);
  std::string* _internal_mutable_consumer_tag();
  public:

  // string queue_name = 4;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // bool auto_ack = 5;
  void clear_auto_ack();
  bool auto_ack() const;
  void set_auto_ack(bool value);
  private:
  bool _internal_auto_ack() const;
  void _internal_set_auto_ack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.basicConsumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  bool auto_ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicCancelRequest) */ {
 public:
  inline basicCancelRequest() : basicCancelRequest(nullptr) {};
  virtual ~basicCancelRequest();

  basicCancelRequest(const basicCancelRequest& from);
  basicCancelRequest(basicCancelRequest&& from) noexcept
    : basicCancelRequest() {
    *this = ::std::move(from);
  }

  inline basicCancelRequest& operator=(const basicCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicCancelRequest& operator=(basicCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicCancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicCancelRequest* internal_default_instance() {
    return reinterpret_cast<const basicCancelRequest*>(
               &_basicCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(basicCancelRequest& a, basicCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(basicCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicCancelRequest* New() const final {
    return CreateMaybeMessage<basicCancelRequest>(nullptr);
  }

  basicCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicCancelRequest& from);
  void MergeFrom(const basicCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicCancelRequest";
  }
  protected:
  explicit basicCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kConsumerTagFieldNumber = 3,
    kQueueNameFieldNumber = 4,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string consumer_tag = 3;
  void clear_consumer_tag();
  const std::string& consumer_tag() const;
  void set_consumer_tag(const std::string& value);
  void set_consumer_tag(std::string&& value);
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  std::string* mutable_consumer_tag();
  std::string* release_consumer_tag();
  void set_allocated_consumer_tag(std::string* consumer_tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consumer_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consumer_tag(
      std::string* consumer_tag);
  private:
  const std::string& _internal_consumer_tag() const;
  void _internal_set_consumer_tag(const std::string& value);
  std::string* _internal_mutable_consumer_tag();
  public:

  // string queue_name = 4;
  void clear_queue_name();
  const std::string& queue_name() const;
  void set_queue_name(const std::string& value);
  void set_queue_name(std::string&& value);
  void set_queue_name(const char* value);
  void set_queue_name(const char* value, size_t size);
  std::string* mutable_queue_name();
  std::string* release_queue_name();
  void set_allocated_queue_name(std::string* queue_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_queue_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_queue_name(
      std::string* queue_name);
  private:
  const std::string& _internal_queue_name() const;
  void _internal_set_queue_name(const std::string& value);
  std::string* _internal_mutable_queue_name();
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.basicCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicConsumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicConsumeResponse) */ {
 public:
  inline basicConsumeResponse() : basicConsumeResponse(nullptr) {};
  virtual ~basicConsumeResponse();

  basicConsumeResponse(const basicConsumeResponse& from);
  basicConsumeResponse(basicConsumeResponse&& from) noexcept
    : basicConsumeResponse() {
    *this = ::std::move(from);
  }

  inline basicConsumeResponse& operator=(const basicConsumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicConsumeResponse& operator=(basicConsumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicConsumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicConsumeResponse* internal_default_instance() {
    return reinterpret_cast<const basicConsumeResponse*>(
               &_basicConsumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(basicConsumeResponse& a, basicConsumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(basicConsumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicConsumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicConsumeResponse* New() const final {
    return CreateMaybeMessage<basicConsumeResponse>(nullptr);
  }

  basicConsumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicConsumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicConsumeResponse& from);
  void MergeFrom(const basicConsumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicConsumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicConsumeResponse";
  }
  protected:
  explicit basicConsumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
    kConsumerTagFieldNumber = 2,
    kBodyFieldNumber = 3,
    kPropertiesFieldNumber = 4,
  };
  // string cid = 1;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string consumer_tag = 2;
  void clear_consumer_tag();
  const std::string& consumer_tag() const;
  void set_consumer_tag(const std::string& value);
  void set_consumer_tag(std::string&& value);
  void set_consumer_tag(const char* value);
  void set_consumer_tag(const char* value, size_t size);
  std::string* mutable_consumer_tag();
  std::string* release_consumer_tag();
  void set_allocated_consumer_tag(std::string* consumer_tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_consumer_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_consumer_tag(
      std::string* consumer_tag);
  private:
  const std::string& _internal_consumer_tag() const;
  void _internal_set_consumer_tag(const std::string& value);
  std::string* _internal_mutable_consumer_tag();
  public:

  // string body = 3;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .zkpmq.BasicProperties properties = 4;
  bool has_properties() const;
  private:
  bool _internal_has_properties() const;
  public:
  void clear_properties();
  const ::zkpmq::BasicProperties& properties() const;
  ::zkpmq::BasicProperties* release_properties();
  ::zkpmq::BasicProperties* mutable_properties();
  void set_allocated_properties(::zkpmq::BasicProperties* properties);
  private:
  const ::zkpmq::BasicProperties& _internal_properties() const;
  ::zkpmq::BasicProperties* _internal_mutable_properties();
  public:
  void unsafe_arena_set_allocated_properties(
      ::zkpmq::BasicProperties* properties);
  ::zkpmq::BasicProperties* unsafe_arena_release_properties();

  // @@protoc_insertion_point(class_scope:zkpmq.basicConsumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::zkpmq::BasicProperties* properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// -------------------------------------------------------------------

class basicCommonResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zkpmq.basicCommonResponse) */ {
 public:
  inline basicCommonResponse() : basicCommonResponse(nullptr) {};
  virtual ~basicCommonResponse();

  basicCommonResponse(const basicCommonResponse& from);
  basicCommonResponse(basicCommonResponse&& from) noexcept
    : basicCommonResponse() {
    *this = ::std::move(from);
  }

  inline basicCommonResponse& operator=(const basicCommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline basicCommonResponse& operator=(basicCommonResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const basicCommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const basicCommonResponse* internal_default_instance() {
    return reinterpret_cast<const basicCommonResponse*>(
               &_basicCommonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(basicCommonResponse& a, basicCommonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(basicCommonResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(basicCommonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline basicCommonResponse* New() const final {
    return CreateMaybeMessage<basicCommonResponse>(nullptr);
  }

  basicCommonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<basicCommonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const basicCommonResponse& from);
  void MergeFrom(const basicCommonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(basicCommonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zkpmq.basicCommonResponse";
  }
  protected:
  explicit basicCommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mq_5fproto_2eproto);
    return ::descriptor_table_mq_5fproto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRidFieldNumber = 1,
    kCidFieldNumber = 2,
    kOkFieldNumber = 3,
  };
  // string rid = 1;
  void clear_rid();
  const std::string& rid() const;
  void set_rid(const std::string& value);
  void set_rid(std::string&& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  std::string* mutable_rid();
  std::string* release_rid();
  void set_allocated_rid(std::string* rid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rid(
      std::string* rid);
  private:
  const std::string& _internal_rid() const;
  void _internal_set_rid(const std::string& value);
  std::string* _internal_mutable_rid();
  public:

  // string cid = 2;
  void clear_cid();
  const std::string& cid() const;
  void set_cid(const std::string& value);
  void set_cid(std::string&& value);
  void set_cid(const char* value);
  void set_cid(const char* value, size_t size);
  std::string* mutable_cid();
  std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cid(
      std::string* cid);
  private:
  const std::string& _internal_cid() const;
  void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // bool ok = 3;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:zkpmq.basicCommonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mq_5fproto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// openChannelRequest

// string rid = 1;
inline void openChannelRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& openChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.openChannelRequest.rid)
  return _internal_rid();
}
inline void openChannelRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.openChannelRequest.rid)
}
inline std::string* openChannelRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.openChannelRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& openChannelRequest::_internal_rid() const {
  return rid_.Get();
}
inline void openChannelRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void openChannelRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.openChannelRequest.rid)
}
inline void openChannelRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.openChannelRequest.rid)
}
inline void openChannelRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.openChannelRequest.rid)
}
inline std::string* openChannelRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* openChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.openChannelRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void openChannelRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.openChannelRequest.rid)
}
inline std::string* openChannelRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.openChannelRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void openChannelRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.openChannelRequest.rid)
}

// string cid = 2;
inline void openChannelRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& openChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.openChannelRequest.cid)
  return _internal_cid();
}
inline void openChannelRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.openChannelRequest.cid)
}
inline std::string* openChannelRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.openChannelRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& openChannelRequest::_internal_cid() const {
  return cid_.Get();
}
inline void openChannelRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void openChannelRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.openChannelRequest.cid)
}
inline void openChannelRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.openChannelRequest.cid)
}
inline void openChannelRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.openChannelRequest.cid)
}
inline std::string* openChannelRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* openChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.openChannelRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void openChannelRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.openChannelRequest.cid)
}
inline std::string* openChannelRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.openChannelRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void openChannelRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.openChannelRequest.cid)
}

// -------------------------------------------------------------------

// closeChannelRequest

// string rid = 1;
inline void closeChannelRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& closeChannelRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.closeChannelRequest.rid)
  return _internal_rid();
}
inline void closeChannelRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.closeChannelRequest.rid)
}
inline std::string* closeChannelRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.closeChannelRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& closeChannelRequest::_internal_rid() const {
  return rid_.Get();
}
inline void closeChannelRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void closeChannelRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.closeChannelRequest.rid)
}
inline void closeChannelRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.closeChannelRequest.rid)
}
inline void closeChannelRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.closeChannelRequest.rid)
}
inline std::string* closeChannelRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* closeChannelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.closeChannelRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void closeChannelRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.closeChannelRequest.rid)
}
inline std::string* closeChannelRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.closeChannelRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void closeChannelRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.closeChannelRequest.rid)
}

// string cid = 2;
inline void closeChannelRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& closeChannelRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.closeChannelRequest.cid)
  return _internal_cid();
}
inline void closeChannelRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.closeChannelRequest.cid)
}
inline std::string* closeChannelRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.closeChannelRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& closeChannelRequest::_internal_cid() const {
  return cid_.Get();
}
inline void closeChannelRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void closeChannelRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.closeChannelRequest.cid)
}
inline void closeChannelRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.closeChannelRequest.cid)
}
inline void closeChannelRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.closeChannelRequest.cid)
}
inline std::string* closeChannelRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* closeChannelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.closeChannelRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void closeChannelRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.closeChannelRequest.cid)
}
inline std::string* closeChannelRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.closeChannelRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void closeChannelRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.closeChannelRequest.cid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// declareExchangeRequest

// string rid = 1;
inline void declareExchangeRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.rid)
  return _internal_rid();
}
inline void declareExchangeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.rid)
}
inline std::string* declareExchangeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareExchangeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& declareExchangeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void declareExchangeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareExchangeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareExchangeRequest.rid)
}
inline void declareExchangeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareExchangeRequest.rid)
}
inline void declareExchangeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareExchangeRequest.rid)
}
inline std::string* declareExchangeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.declareExchangeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareExchangeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareExchangeRequest.rid)
}
inline std::string* declareExchangeRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareExchangeRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareExchangeRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareExchangeRequest.rid)
}

// string cid = 2;
inline void declareExchangeRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.cid)
  return _internal_cid();
}
inline void declareExchangeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.cid)
}
inline std::string* declareExchangeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareExchangeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& declareExchangeRequest::_internal_cid() const {
  return cid_.Get();
}
inline void declareExchangeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareExchangeRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareExchangeRequest.cid)
}
inline void declareExchangeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareExchangeRequest.cid)
}
inline void declareExchangeRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareExchangeRequest.cid)
}
inline std::string* declareExchangeRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.declareExchangeRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareExchangeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareExchangeRequest.cid)
}
inline std::string* declareExchangeRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareExchangeRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareExchangeRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareExchangeRequest.cid)
}

// string exchange_name = 3;
inline void declareExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.exchange_name)
  return _internal_exchange_name();
}
inline void declareExchangeRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.exchange_name)
}
inline std::string* declareExchangeRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareExchangeRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& declareExchangeRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void declareExchangeRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareExchangeRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareExchangeRequest.exchange_name)
}
inline void declareExchangeRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareExchangeRequest.exchange_name)
}
inline void declareExchangeRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareExchangeRequest.exchange_name)
}
inline std::string* declareExchangeRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:zkpmq.declareExchangeRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareExchangeRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareExchangeRequest.exchange_name)
}
inline std::string* declareExchangeRequest::unsafe_arena_release_exchange_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareExchangeRequest.exchange_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareExchangeRequest::unsafe_arena_set_allocated_exchange_name(
    std::string* exchange_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareExchangeRequest.exchange_name)
}

// .zkpmq.ExchangeType exchange_type = 4;
inline void declareExchangeRequest::clear_exchange_type() {
  exchange_type_ = 0;
}
inline ::zkpmq::ExchangeType declareExchangeRequest::_internal_exchange_type() const {
  return static_cast< ::zkpmq::ExchangeType >(exchange_type_);
}
inline ::zkpmq::ExchangeType declareExchangeRequest::exchange_type() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.exchange_type)
  return _internal_exchange_type();
}
inline void declareExchangeRequest::_internal_set_exchange_type(::zkpmq::ExchangeType value) {
  
  exchange_type_ = value;
}
inline void declareExchangeRequest::set_exchange_type(::zkpmq::ExchangeType value) {
  _internal_set_exchange_type(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.exchange_type)
}

// bool durable = 5;
inline void declareExchangeRequest::clear_durable() {
  durable_ = false;
}
inline bool declareExchangeRequest::_internal_durable() const {
  return durable_;
}
inline bool declareExchangeRequest::durable() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.durable)
  return _internal_durable();
}
inline void declareExchangeRequest::_internal_set_durable(bool value) {
  
  durable_ = value;
}
inline void declareExchangeRequest::set_durable(bool value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.durable)
}

// bool auto_delete = 6;
inline void declareExchangeRequest::clear_auto_delete() {
  auto_delete_ = false;
}
inline bool declareExchangeRequest::_internal_auto_delete() const {
  return auto_delete_;
}
inline bool declareExchangeRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareExchangeRequest.auto_delete)
  return _internal_auto_delete();
}
inline void declareExchangeRequest::_internal_set_auto_delete(bool value) {
  
  auto_delete_ = value;
}
inline void declareExchangeRequest::set_auto_delete(bool value) {
  _internal_set_auto_delete(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareExchangeRequest.auto_delete)
}

// map<string, string> args = 7;
inline int declareExchangeRequest::_internal_args_size() const {
  return args_.size();
}
inline int declareExchangeRequest::args_size() const {
  return _internal_args_size();
}
inline void declareExchangeRequest::clear_args() {
  args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
declareExchangeRequest::_internal_args() const {
  return args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
declareExchangeRequest::args() const {
  // @@protoc_insertion_point(field_map:zkpmq.declareExchangeRequest.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
declareExchangeRequest::_internal_mutable_args() {
  return args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
declareExchangeRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:zkpmq.declareExchangeRequest.args)
  return _internal_mutable_args();
}

// -------------------------------------------------------------------

// deleteExchangeRequest

// string rid = 1;
inline void deleteExchangeRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteExchangeRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteExchangeRequest.rid)
  return _internal_rid();
}
inline void deleteExchangeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteExchangeRequest.rid)
}
inline std::string* deleteExchangeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteExchangeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& deleteExchangeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void deleteExchangeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteExchangeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteExchangeRequest.rid)
}
inline void deleteExchangeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteExchangeRequest.rid)
}
inline void deleteExchangeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteExchangeRequest.rid)
}
inline std::string* deleteExchangeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteExchangeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteExchangeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteExchangeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteExchangeRequest.rid)
}
inline std::string* deleteExchangeRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteExchangeRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteExchangeRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteExchangeRequest.rid)
}

// string cid = 2;
inline void deleteExchangeRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteExchangeRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteExchangeRequest.cid)
  return _internal_cid();
}
inline void deleteExchangeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteExchangeRequest.cid)
}
inline std::string* deleteExchangeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteExchangeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& deleteExchangeRequest::_internal_cid() const {
  return cid_.Get();
}
inline void deleteExchangeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteExchangeRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteExchangeRequest.cid)
}
inline void deleteExchangeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteExchangeRequest.cid)
}
inline void deleteExchangeRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteExchangeRequest.cid)
}
inline std::string* deleteExchangeRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteExchangeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteExchangeRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteExchangeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteExchangeRequest.cid)
}
inline std::string* deleteExchangeRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteExchangeRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteExchangeRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteExchangeRequest.cid)
}

// string exchange_name = 3;
inline void deleteExchangeRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteExchangeRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteExchangeRequest.exchange_name)
  return _internal_exchange_name();
}
inline void deleteExchangeRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteExchangeRequest.exchange_name)
}
inline std::string* deleteExchangeRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteExchangeRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& deleteExchangeRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void deleteExchangeRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteExchangeRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteExchangeRequest.exchange_name)
}
inline void deleteExchangeRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteExchangeRequest.exchange_name)
}
inline void deleteExchangeRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteExchangeRequest.exchange_name)
}
inline std::string* deleteExchangeRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteExchangeRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteExchangeRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteExchangeRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteExchangeRequest.exchange_name)
}
inline std::string* deleteExchangeRequest::unsafe_arena_release_exchange_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteExchangeRequest.exchange_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteExchangeRequest::unsafe_arena_set_allocated_exchange_name(
    std::string* exchange_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteExchangeRequest.exchange_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// declareQueueRequest

// string rid = 1;
inline void declareQueueRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.rid)
  return _internal_rid();
}
inline void declareQueueRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.rid)
}
inline std::string* declareQueueRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareQueueRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& declareQueueRequest::_internal_rid() const {
  return rid_.Get();
}
inline void declareQueueRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareQueueRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareQueueRequest.rid)
}
inline void declareQueueRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareQueueRequest.rid)
}
inline void declareQueueRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareQueueRequest.rid)
}
inline std::string* declareQueueRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.declareQueueRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareQueueRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareQueueRequest.rid)
}
inline std::string* declareQueueRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareQueueRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareQueueRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareQueueRequest.rid)
}

// string cid = 2;
inline void declareQueueRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.cid)
  return _internal_cid();
}
inline void declareQueueRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.cid)
}
inline std::string* declareQueueRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareQueueRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& declareQueueRequest::_internal_cid() const {
  return cid_.Get();
}
inline void declareQueueRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareQueueRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareQueueRequest.cid)
}
inline void declareQueueRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareQueueRequest.cid)
}
inline void declareQueueRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareQueueRequest.cid)
}
inline std::string* declareQueueRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.declareQueueRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareQueueRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareQueueRequest.cid)
}
inline std::string* declareQueueRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareQueueRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareQueueRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareQueueRequest.cid)
}

// string queue_name = 3;
inline void declareQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& declareQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void declareQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.queue_name)
}
inline std::string* declareQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.declareQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& declareQueueRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void declareQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void declareQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.declareQueueRequest.queue_name)
}
inline void declareQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.declareQueueRequest.queue_name)
}
inline void declareQueueRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.declareQueueRequest.queue_name)
}
inline std::string* declareQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* declareQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.declareQueueRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void declareQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.declareQueueRequest.queue_name)
}
inline std::string* declareQueueRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.declareQueueRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void declareQueueRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.declareQueueRequest.queue_name)
}

// bool exclusive = 4;
inline void declareQueueRequest::clear_exclusive() {
  exclusive_ = false;
}
inline bool declareQueueRequest::_internal_exclusive() const {
  return exclusive_;
}
inline bool declareQueueRequest::exclusive() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.exclusive)
  return _internal_exclusive();
}
inline void declareQueueRequest::_internal_set_exclusive(bool value) {
  
  exclusive_ = value;
}
inline void declareQueueRequest::set_exclusive(bool value) {
  _internal_set_exclusive(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.exclusive)
}

// bool durable = 5;
inline void declareQueueRequest::clear_durable() {
  durable_ = false;
}
inline bool declareQueueRequest::_internal_durable() const {
  return durable_;
}
inline bool declareQueueRequest::durable() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.durable)
  return _internal_durable();
}
inline void declareQueueRequest::_internal_set_durable(bool value) {
  
  durable_ = value;
}
inline void declareQueueRequest::set_durable(bool value) {
  _internal_set_durable(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.durable)
}

// bool auto_delete = 6;
inline void declareQueueRequest::clear_auto_delete() {
  auto_delete_ = false;
}
inline bool declareQueueRequest::_internal_auto_delete() const {
  return auto_delete_;
}
inline bool declareQueueRequest::auto_delete() const {
  // @@protoc_insertion_point(field_get:zkpmq.declareQueueRequest.auto_delete)
  return _internal_auto_delete();
}
inline void declareQueueRequest::_internal_set_auto_delete(bool value) {
  
  auto_delete_ = value;
}
inline void declareQueueRequest::set_auto_delete(bool value) {
  _internal_set_auto_delete(value);
  // @@protoc_insertion_point(field_set:zkpmq.declareQueueRequest.auto_delete)
}

// map<string, string> args = 7;
inline int declareQueueRequest::_internal_args_size() const {
  return args_.size();
}
inline int declareQueueRequest::args_size() const {
  return _internal_args_size();
}
inline void declareQueueRequest::clear_args() {
  args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
declareQueueRequest::_internal_args() const {
  return args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
declareQueueRequest::args() const {
  // @@protoc_insertion_point(field_map:zkpmq.declareQueueRequest.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
declareQueueRequest::_internal_mutable_args() {
  return args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
declareQueueRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:zkpmq.declareQueueRequest.args)
  return _internal_mutable_args();
}

// -------------------------------------------------------------------

// deleteQueueRequest

// string rid = 1;
inline void deleteQueueRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteQueueRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteQueueRequest.rid)
  return _internal_rid();
}
inline void deleteQueueRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteQueueRequest.rid)
}
inline std::string* deleteQueueRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteQueueRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& deleteQueueRequest::_internal_rid() const {
  return rid_.Get();
}
inline void deleteQueueRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteQueueRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteQueueRequest.rid)
}
inline void deleteQueueRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteQueueRequest.rid)
}
inline void deleteQueueRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteQueueRequest.rid)
}
inline std::string* deleteQueueRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteQueueRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteQueueRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteQueueRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteQueueRequest.rid)
}
inline std::string* deleteQueueRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteQueueRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteQueueRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteQueueRequest.rid)
}

// string cid = 2;
inline void deleteQueueRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteQueueRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteQueueRequest.cid)
  return _internal_cid();
}
inline void deleteQueueRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteQueueRequest.cid)
}
inline std::string* deleteQueueRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteQueueRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& deleteQueueRequest::_internal_cid() const {
  return cid_.Get();
}
inline void deleteQueueRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteQueueRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteQueueRequest.cid)
}
inline void deleteQueueRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteQueueRequest.cid)
}
inline void deleteQueueRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteQueueRequest.cid)
}
inline std::string* deleteQueueRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteQueueRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteQueueRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteQueueRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteQueueRequest.cid)
}
inline std::string* deleteQueueRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteQueueRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteQueueRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteQueueRequest.cid)
}

// string queue_name = 3;
inline void deleteQueueRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& deleteQueueRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.deleteQueueRequest.queue_name)
  return _internal_queue_name();
}
inline void deleteQueueRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.deleteQueueRequest.queue_name)
}
inline std::string* deleteQueueRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.deleteQueueRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& deleteQueueRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void deleteQueueRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void deleteQueueRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.deleteQueueRequest.queue_name)
}
inline void deleteQueueRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.deleteQueueRequest.queue_name)
}
inline void deleteQueueRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.deleteQueueRequest.queue_name)
}
inline std::string* deleteQueueRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* deleteQueueRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.deleteQueueRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void deleteQueueRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.deleteQueueRequest.queue_name)
}
inline std::string* deleteQueueRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.deleteQueueRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void deleteQueueRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.deleteQueueRequest.queue_name)
}

// -------------------------------------------------------------------

// queueBindRequest

// string rid = 1;
inline void queueBindRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueBindRequest.rid)
  return _internal_rid();
}
inline void queueBindRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueBindRequest.rid)
}
inline std::string* queueBindRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueBindRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& queueBindRequest::_internal_rid() const {
  return rid_.Get();
}
inline void queueBindRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueBindRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueBindRequest.rid)
}
inline void queueBindRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueBindRequest.rid)
}
inline void queueBindRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueBindRequest.rid)
}
inline std::string* queueBindRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.queueBindRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueBindRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueBindRequest.rid)
}
inline std::string* queueBindRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueBindRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueBindRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueBindRequest.rid)
}

// string cid = 2;
inline void queueBindRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueBindRequest.cid)
  return _internal_cid();
}
inline void queueBindRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueBindRequest.cid)
}
inline std::string* queueBindRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueBindRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& queueBindRequest::_internal_cid() const {
  return cid_.Get();
}
inline void queueBindRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueBindRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueBindRequest.cid)
}
inline void queueBindRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueBindRequest.cid)
}
inline void queueBindRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueBindRequest.cid)
}
inline std::string* queueBindRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.queueBindRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueBindRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueBindRequest.cid)
}
inline std::string* queueBindRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueBindRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueBindRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueBindRequest.cid)
}

// string exchange_name = 3;
inline void queueBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueBindRequest.exchange_name)
  return _internal_exchange_name();
}
inline void queueBindRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueBindRequest.exchange_name)
}
inline std::string* queueBindRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueBindRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& queueBindRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void queueBindRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueBindRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueBindRequest.exchange_name)
}
inline void queueBindRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueBindRequest.exchange_name)
}
inline void queueBindRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueBindRequest.exchange_name)
}
inline std::string* queueBindRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:zkpmq.queueBindRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueBindRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueBindRequest.exchange_name)
}
inline std::string* queueBindRequest::unsafe_arena_release_exchange_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueBindRequest.exchange_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueBindRequest::unsafe_arena_set_allocated_exchange_name(
    std::string* exchange_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueBindRequest.exchange_name)
}

// string queue_name = 4;
inline void queueBindRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueBindRequest.queue_name)
  return _internal_queue_name();
}
inline void queueBindRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueBindRequest.queue_name)
}
inline std::string* queueBindRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueBindRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& queueBindRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void queueBindRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueBindRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueBindRequest.queue_name)
}
inline void queueBindRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueBindRequest.queue_name)
}
inline void queueBindRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueBindRequest.queue_name)
}
inline std::string* queueBindRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.queueBindRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueBindRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueBindRequest.queue_name)
}
inline std::string* queueBindRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueBindRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueBindRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueBindRequest.queue_name)
}

// string binding_key = 5;
inline void queueBindRequest::clear_binding_key() {
  binding_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueBindRequest::binding_key() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueBindRequest.binding_key)
  return _internal_binding_key();
}
inline void queueBindRequest::set_binding_key(const std::string& value) {
  _internal_set_binding_key(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueBindRequest.binding_key)
}
inline std::string* queueBindRequest::mutable_binding_key() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueBindRequest.binding_key)
  return _internal_mutable_binding_key();
}
inline const std::string& queueBindRequest::_internal_binding_key() const {
  return binding_key_.Get();
}
inline void queueBindRequest::_internal_set_binding_key(const std::string& value) {
  
  binding_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueBindRequest::set_binding_key(std::string&& value) {
  
  binding_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueBindRequest.binding_key)
}
inline void queueBindRequest::set_binding_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  binding_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueBindRequest.binding_key)
}
inline void queueBindRequest::set_binding_key(const char* value,
    size_t size) {
  
  binding_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueBindRequest.binding_key)
}
inline std::string* queueBindRequest::_internal_mutable_binding_key() {
  
  return binding_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueBindRequest::release_binding_key() {
  // @@protoc_insertion_point(field_release:zkpmq.queueBindRequest.binding_key)
  return binding_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueBindRequest::set_allocated_binding_key(std::string* binding_key) {
  if (binding_key != nullptr) {
    
  } else {
    
  }
  binding_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binding_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueBindRequest.binding_key)
}
inline std::string* queueBindRequest::unsafe_arena_release_binding_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueBindRequest.binding_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return binding_key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueBindRequest::unsafe_arena_set_allocated_binding_key(
    std::string* binding_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (binding_key != nullptr) {
    
  } else {
    
  }
  binding_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      binding_key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueBindRequest.binding_key)
}

// -------------------------------------------------------------------

// queueUnBindRequest

// string rid = 1;
inline void queueUnBindRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueUnBindRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueUnBindRequest.rid)
  return _internal_rid();
}
inline void queueUnBindRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueUnBindRequest.rid)
}
inline std::string* queueUnBindRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueUnBindRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& queueUnBindRequest::_internal_rid() const {
  return rid_.Get();
}
inline void queueUnBindRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueUnBindRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueUnBindRequest.rid)
}
inline void queueUnBindRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueUnBindRequest.rid)
}
inline void queueUnBindRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueUnBindRequest.rid)
}
inline std::string* queueUnBindRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueUnBindRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.queueUnBindRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueUnBindRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueUnBindRequest.rid)
}
inline std::string* queueUnBindRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueUnBindRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueUnBindRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueUnBindRequest.rid)
}

// string cid = 2;
inline void queueUnBindRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueUnBindRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueUnBindRequest.cid)
  return _internal_cid();
}
inline void queueUnBindRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueUnBindRequest.cid)
}
inline std::string* queueUnBindRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueUnBindRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& queueUnBindRequest::_internal_cid() const {
  return cid_.Get();
}
inline void queueUnBindRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueUnBindRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueUnBindRequest.cid)
}
inline void queueUnBindRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueUnBindRequest.cid)
}
inline void queueUnBindRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueUnBindRequest.cid)
}
inline std::string* queueUnBindRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueUnBindRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.queueUnBindRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueUnBindRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueUnBindRequest.cid)
}
inline std::string* queueUnBindRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueUnBindRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueUnBindRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueUnBindRequest.cid)
}

// string exchange_name = 3;
inline void queueUnBindRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueUnBindRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueUnBindRequest.exchange_name)
  return _internal_exchange_name();
}
inline void queueUnBindRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueUnBindRequest.exchange_name)
}
inline std::string* queueUnBindRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueUnBindRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& queueUnBindRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void queueUnBindRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueUnBindRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueUnBindRequest.exchange_name)
}
inline void queueUnBindRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueUnBindRequest.exchange_name)
}
inline void queueUnBindRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueUnBindRequest.exchange_name)
}
inline std::string* queueUnBindRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueUnBindRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:zkpmq.queueUnBindRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueUnBindRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueUnBindRequest.exchange_name)
}
inline std::string* queueUnBindRequest::unsafe_arena_release_exchange_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueUnBindRequest.exchange_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueUnBindRequest::unsafe_arena_set_allocated_exchange_name(
    std::string* exchange_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueUnBindRequest.exchange_name)
}

// string queue_name = 4;
inline void queueUnBindRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& queueUnBindRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.queueUnBindRequest.queue_name)
  return _internal_queue_name();
}
inline void queueUnBindRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.queueUnBindRequest.queue_name)
}
inline std::string* queueUnBindRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.queueUnBindRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& queueUnBindRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void queueUnBindRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void queueUnBindRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.queueUnBindRequest.queue_name)
}
inline void queueUnBindRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.queueUnBindRequest.queue_name)
}
inline void queueUnBindRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.queueUnBindRequest.queue_name)
}
inline std::string* queueUnBindRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* queueUnBindRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.queueUnBindRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void queueUnBindRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.queueUnBindRequest.queue_name)
}
inline std::string* queueUnBindRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.queueUnBindRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void queueUnBindRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.queueUnBindRequest.queue_name)
}

// -------------------------------------------------------------------

// basicPublishRequest

// string rid = 1;
inline void basicPublishRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicPublishRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicPublishRequest.rid)
  return _internal_rid();
}
inline void basicPublishRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicPublishRequest.rid)
}
inline std::string* basicPublishRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicPublishRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& basicPublishRequest::_internal_rid() const {
  return rid_.Get();
}
inline void basicPublishRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicPublishRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicPublishRequest.rid)
}
inline void basicPublishRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicPublishRequest.rid)
}
inline void basicPublishRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicPublishRequest.rid)
}
inline std::string* basicPublishRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicPublishRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicPublishRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicPublishRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicPublishRequest.rid)
}
inline std::string* basicPublishRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicPublishRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicPublishRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicPublishRequest.rid)
}

// string cid = 2;
inline void basicPublishRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicPublishRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicPublishRequest.cid)
  return _internal_cid();
}
inline void basicPublishRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicPublishRequest.cid)
}
inline std::string* basicPublishRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicPublishRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicPublishRequest::_internal_cid() const {
  return cid_.Get();
}
inline void basicPublishRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicPublishRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicPublishRequest.cid)
}
inline void basicPublishRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicPublishRequest.cid)
}
inline void basicPublishRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicPublishRequest.cid)
}
inline std::string* basicPublishRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicPublishRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicPublishRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicPublishRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicPublishRequest.cid)
}
inline std::string* basicPublishRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicPublishRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicPublishRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicPublishRequest.cid)
}

// string exchange_name = 3;
inline void basicPublishRequest::clear_exchange_name() {
  exchange_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicPublishRequest::exchange_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicPublishRequest.exchange_name)
  return _internal_exchange_name();
}
inline void basicPublishRequest::set_exchange_name(const std::string& value) {
  _internal_set_exchange_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicPublishRequest.exchange_name)
}
inline std::string* basicPublishRequest::mutable_exchange_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicPublishRequest.exchange_name)
  return _internal_mutable_exchange_name();
}
inline const std::string& basicPublishRequest::_internal_exchange_name() const {
  return exchange_name_.Get();
}
inline void basicPublishRequest::_internal_set_exchange_name(const std::string& value) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicPublishRequest::set_exchange_name(std::string&& value) {
  
  exchange_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicPublishRequest.exchange_name)
}
inline void basicPublishRequest::set_exchange_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicPublishRequest.exchange_name)
}
inline void basicPublishRequest::set_exchange_name(const char* value,
    size_t size) {
  
  exchange_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicPublishRequest.exchange_name)
}
inline std::string* basicPublishRequest::_internal_mutable_exchange_name() {
  
  return exchange_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicPublishRequest::release_exchange_name() {
  // @@protoc_insertion_point(field_release:zkpmq.basicPublishRequest.exchange_name)
  return exchange_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicPublishRequest::set_allocated_exchange_name(std::string* exchange_name) {
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicPublishRequest.exchange_name)
}
inline std::string* basicPublishRequest::unsafe_arena_release_exchange_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicPublishRequest.exchange_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicPublishRequest::unsafe_arena_set_allocated_exchange_name(
    std::string* exchange_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_name != nullptr) {
    
  } else {
    
  }
  exchange_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicPublishRequest.exchange_name)
}

// string body = 4;
inline void basicPublishRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicPublishRequest::body() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicPublishRequest.body)
  return _internal_body();
}
inline void basicPublishRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicPublishRequest.body)
}
inline std::string* basicPublishRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicPublishRequest.body)
  return _internal_mutable_body();
}
inline const std::string& basicPublishRequest::_internal_body() const {
  return body_.Get();
}
inline void basicPublishRequest::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicPublishRequest::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicPublishRequest.body)
}
inline void basicPublishRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicPublishRequest.body)
}
inline void basicPublishRequest::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicPublishRequest.body)
}
inline std::string* basicPublishRequest::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicPublishRequest::release_body() {
  // @@protoc_insertion_point(field_release:zkpmq.basicPublishRequest.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicPublishRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicPublishRequest.body)
}
inline std::string* basicPublishRequest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicPublishRequest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicPublishRequest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicPublishRequest.body)
}

// .zkpmq.BasicProperties properties = 5;
inline bool basicPublishRequest::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool basicPublishRequest::has_properties() const {
  return _internal_has_properties();
}
inline const ::zkpmq::BasicProperties& basicPublishRequest::_internal_properties() const {
  const ::zkpmq::BasicProperties* p = properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkpmq::BasicProperties*>(
      &::zkpmq::_BasicProperties_default_instance_);
}
inline const ::zkpmq::BasicProperties& basicPublishRequest::properties() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicPublishRequest.properties)
  return _internal_properties();
}
inline void basicPublishRequest::unsafe_arena_set_allocated_properties(
    ::zkpmq::BasicProperties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicPublishRequest.properties)
}
inline ::zkpmq::BasicProperties* basicPublishRequest::release_properties() {
  auto temp = unsafe_arena_release_properties();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkpmq::BasicProperties* basicPublishRequest::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:zkpmq.basicPublishRequest.properties)
  
  ::zkpmq::BasicProperties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::zkpmq::BasicProperties* basicPublishRequest::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkpmq::BasicProperties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::zkpmq::BasicProperties* basicPublishRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicPublishRequest.properties)
  return _internal_mutable_properties();
}
inline void basicPublishRequest::set_allocated_properties(::zkpmq::BasicProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicPublishRequest.properties)
}

// -------------------------------------------------------------------

// basicAckRequest

// string rid = 1;
inline void basicAckRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicAckRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicAckRequest.rid)
  return _internal_rid();
}
inline void basicAckRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicAckRequest.rid)
}
inline std::string* basicAckRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicAckRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& basicAckRequest::_internal_rid() const {
  return rid_.Get();
}
inline void basicAckRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicAckRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicAckRequest.rid)
}
inline void basicAckRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicAckRequest.rid)
}
inline void basicAckRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicAckRequest.rid)
}
inline std::string* basicAckRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicAckRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicAckRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicAckRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicAckRequest.rid)
}
inline std::string* basicAckRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicAckRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicAckRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicAckRequest.rid)
}

// string cid = 2;
inline void basicAckRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicAckRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicAckRequest.cid)
  return _internal_cid();
}
inline void basicAckRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicAckRequest.cid)
}
inline std::string* basicAckRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicAckRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicAckRequest::_internal_cid() const {
  return cid_.Get();
}
inline void basicAckRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicAckRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicAckRequest.cid)
}
inline void basicAckRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicAckRequest.cid)
}
inline void basicAckRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicAckRequest.cid)
}
inline std::string* basicAckRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicAckRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicAckRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicAckRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicAckRequest.cid)
}
inline std::string* basicAckRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicAckRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicAckRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicAckRequest.cid)
}

// string queue_name = 3;
inline void basicAckRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicAckRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicAckRequest.queue_name)
  return _internal_queue_name();
}
inline void basicAckRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicAckRequest.queue_name)
}
inline std::string* basicAckRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicAckRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& basicAckRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void basicAckRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicAckRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicAckRequest.queue_name)
}
inline void basicAckRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicAckRequest.queue_name)
}
inline void basicAckRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicAckRequest.queue_name)
}
inline std::string* basicAckRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicAckRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.basicAckRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicAckRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicAckRequest.queue_name)
}
inline std::string* basicAckRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicAckRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicAckRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicAckRequest.queue_name)
}

// string message_id = 4;
inline void basicAckRequest::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicAckRequest::message_id() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicAckRequest.message_id)
  return _internal_message_id();
}
inline void basicAckRequest::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicAckRequest.message_id)
}
inline std::string* basicAckRequest::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicAckRequest.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& basicAckRequest::_internal_message_id() const {
  return message_id_.Get();
}
inline void basicAckRequest::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicAckRequest::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicAckRequest.message_id)
}
inline void basicAckRequest::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicAckRequest.message_id)
}
inline void basicAckRequest::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicAckRequest.message_id)
}
inline std::string* basicAckRequest::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicAckRequest::release_message_id() {
  // @@protoc_insertion_point(field_release:zkpmq.basicAckRequest.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicAckRequest::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicAckRequest.message_id)
}
inline std::string* basicAckRequest::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicAckRequest.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicAckRequest::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicAckRequest.message_id)
}

// -------------------------------------------------------------------

// basicConsumeRequest

// string rid = 1;
inline void basicConsumeRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeRequest.rid)
  return _internal_rid();
}
inline void basicConsumeRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeRequest.rid)
}
inline std::string* basicConsumeRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& basicConsumeRequest::_internal_rid() const {
  return rid_.Get();
}
inline void basicConsumeRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeRequest.rid)
}
inline void basicConsumeRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeRequest.rid)
}
inline void basicConsumeRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeRequest.rid)
}
inline std::string* basicConsumeRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeRequest.rid)
}
inline std::string* basicConsumeRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeRequest.rid)
}

// string cid = 2;
inline void basicConsumeRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeRequest.cid)
  return _internal_cid();
}
inline void basicConsumeRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeRequest.cid)
}
inline std::string* basicConsumeRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicConsumeRequest::_internal_cid() const {
  return cid_.Get();
}
inline void basicConsumeRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeRequest.cid)
}
inline void basicConsumeRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeRequest.cid)
}
inline void basicConsumeRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeRequest.cid)
}
inline std::string* basicConsumeRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeRequest.cid)
}
inline std::string* basicConsumeRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeRequest.cid)
}

// string consumer_tag = 3;
inline void basicConsumeRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeRequest.consumer_tag)
  return _internal_consumer_tag();
}
inline void basicConsumeRequest::set_consumer_tag(const std::string& value) {
  _internal_set_consumer_tag(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeRequest.consumer_tag)
}
inline std::string* basicConsumeRequest::mutable_consumer_tag() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeRequest.consumer_tag)
  return _internal_mutable_consumer_tag();
}
inline const std::string& basicConsumeRequest::_internal_consumer_tag() const {
  return consumer_tag_.Get();
}
inline void basicConsumeRequest::_internal_set_consumer_tag(const std::string& value) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeRequest::set_consumer_tag(std::string&& value) {
  
  consumer_tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeRequest.consumer_tag)
}
inline void basicConsumeRequest::set_consumer_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeRequest.consumer_tag)
}
inline void basicConsumeRequest::set_consumer_tag(const char* value,
    size_t size) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeRequest.consumer_tag)
}
inline std::string* basicConsumeRequest::_internal_mutable_consumer_tag() {
  
  return consumer_tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeRequest.consumer_tag)
  return consumer_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeRequest::set_allocated_consumer_tag(std::string* consumer_tag) {
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeRequest.consumer_tag)
}
inline std::string* basicConsumeRequest::unsafe_arena_release_consumer_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeRequest.consumer_tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consumer_tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeRequest::unsafe_arena_set_allocated_consumer_tag(
    std::string* consumer_tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consumer_tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeRequest.consumer_tag)
}

// string queue_name = 4;
inline void basicConsumeRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeRequest.queue_name)
  return _internal_queue_name();
}
inline void basicConsumeRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeRequest.queue_name)
}
inline std::string* basicConsumeRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& basicConsumeRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void basicConsumeRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeRequest.queue_name)
}
inline void basicConsumeRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeRequest.queue_name)
}
inline void basicConsumeRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeRequest.queue_name)
}
inline std::string* basicConsumeRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeRequest.queue_name)
}
inline std::string* basicConsumeRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeRequest.queue_name)
}

// bool auto_ack = 5;
inline void basicConsumeRequest::clear_auto_ack() {
  auto_ack_ = false;
}
inline bool basicConsumeRequest::_internal_auto_ack() const {
  return auto_ack_;
}
inline bool basicConsumeRequest::auto_ack() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeRequest.auto_ack)
  return _internal_auto_ack();
}
inline void basicConsumeRequest::_internal_set_auto_ack(bool value) {
  
  auto_ack_ = value;
}
inline void basicConsumeRequest::set_auto_ack(bool value) {
  _internal_set_auto_ack(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeRequest.auto_ack)
}

// -------------------------------------------------------------------

// basicCancelRequest

// string rid = 1;
inline void basicCancelRequest::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCancelRequest::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCancelRequest.rid)
  return _internal_rid();
}
inline void basicCancelRequest::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCancelRequest.rid)
}
inline std::string* basicCancelRequest::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCancelRequest.rid)
  return _internal_mutable_rid();
}
inline const std::string& basicCancelRequest::_internal_rid() const {
  return rid_.Get();
}
inline void basicCancelRequest::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCancelRequest::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCancelRequest.rid)
}
inline void basicCancelRequest::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCancelRequest.rid)
}
inline void basicCancelRequest::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCancelRequest.rid)
}
inline std::string* basicCancelRequest::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCancelRequest::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCancelRequest.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCancelRequest::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCancelRequest.rid)
}
inline std::string* basicCancelRequest::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCancelRequest.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCancelRequest::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCancelRequest.rid)
}

// string cid = 2;
inline void basicCancelRequest::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCancelRequest::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCancelRequest.cid)
  return _internal_cid();
}
inline void basicCancelRequest::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCancelRequest.cid)
}
inline std::string* basicCancelRequest::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCancelRequest.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicCancelRequest::_internal_cid() const {
  return cid_.Get();
}
inline void basicCancelRequest::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCancelRequest::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCancelRequest.cid)
}
inline void basicCancelRequest::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCancelRequest.cid)
}
inline void basicCancelRequest::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCancelRequest.cid)
}
inline std::string* basicCancelRequest::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCancelRequest::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCancelRequest.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCancelRequest::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCancelRequest.cid)
}
inline std::string* basicCancelRequest::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCancelRequest.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCancelRequest::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCancelRequest.cid)
}

// string consumer_tag = 3;
inline void basicCancelRequest::clear_consumer_tag() {
  consumer_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCancelRequest::consumer_tag() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCancelRequest.consumer_tag)
  return _internal_consumer_tag();
}
inline void basicCancelRequest::set_consumer_tag(const std::string& value) {
  _internal_set_consumer_tag(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCancelRequest.consumer_tag)
}
inline std::string* basicCancelRequest::mutable_consumer_tag() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCancelRequest.consumer_tag)
  return _internal_mutable_consumer_tag();
}
inline const std::string& basicCancelRequest::_internal_consumer_tag() const {
  return consumer_tag_.Get();
}
inline void basicCancelRequest::_internal_set_consumer_tag(const std::string& value) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCancelRequest::set_consumer_tag(std::string&& value) {
  
  consumer_tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCancelRequest.consumer_tag)
}
inline void basicCancelRequest::set_consumer_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCancelRequest.consumer_tag)
}
inline void basicCancelRequest::set_consumer_tag(const char* value,
    size_t size) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCancelRequest.consumer_tag)
}
inline std::string* basicCancelRequest::_internal_mutable_consumer_tag() {
  
  return consumer_tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCancelRequest::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCancelRequest.consumer_tag)
  return consumer_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCancelRequest::set_allocated_consumer_tag(std::string* consumer_tag) {
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCancelRequest.consumer_tag)
}
inline std::string* basicCancelRequest::unsafe_arena_release_consumer_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCancelRequest.consumer_tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consumer_tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCancelRequest::unsafe_arena_set_allocated_consumer_tag(
    std::string* consumer_tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consumer_tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCancelRequest.consumer_tag)
}

// string queue_name = 4;
inline void basicCancelRequest::clear_queue_name() {
  queue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCancelRequest::queue_name() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCancelRequest.queue_name)
  return _internal_queue_name();
}
inline void basicCancelRequest::set_queue_name(const std::string& value) {
  _internal_set_queue_name(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCancelRequest.queue_name)
}
inline std::string* basicCancelRequest::mutable_queue_name() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCancelRequest.queue_name)
  return _internal_mutable_queue_name();
}
inline const std::string& basicCancelRequest::_internal_queue_name() const {
  return queue_name_.Get();
}
inline void basicCancelRequest::_internal_set_queue_name(const std::string& value) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCancelRequest::set_queue_name(std::string&& value) {
  
  queue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCancelRequest.queue_name)
}
inline void basicCancelRequest::set_queue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCancelRequest.queue_name)
}
inline void basicCancelRequest::set_queue_name(const char* value,
    size_t size) {
  
  queue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCancelRequest.queue_name)
}
inline std::string* basicCancelRequest::_internal_mutable_queue_name() {
  
  return queue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCancelRequest::release_queue_name() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCancelRequest.queue_name)
  return queue_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCancelRequest::set_allocated_queue_name(std::string* queue_name) {
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCancelRequest.queue_name)
}
inline std::string* basicCancelRequest::unsafe_arena_release_queue_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCancelRequest.queue_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return queue_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCancelRequest::unsafe_arena_set_allocated_queue_name(
    std::string* queue_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (queue_name != nullptr) {
    
  } else {
    
  }
  queue_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      queue_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCancelRequest.queue_name)
}

// -------------------------------------------------------------------

// basicConsumeResponse

// string cid = 1;
inline void basicConsumeResponse::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeResponse::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeResponse.cid)
  return _internal_cid();
}
inline void basicConsumeResponse::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeResponse.cid)
}
inline std::string* basicConsumeResponse::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeResponse.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicConsumeResponse::_internal_cid() const {
  return cid_.Get();
}
inline void basicConsumeResponse::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeResponse::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeResponse.cid)
}
inline void basicConsumeResponse::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeResponse.cid)
}
inline void basicConsumeResponse::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeResponse.cid)
}
inline std::string* basicConsumeResponse::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeResponse::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeResponse.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeResponse::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeResponse.cid)
}
inline std::string* basicConsumeResponse::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeResponse.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeResponse::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeResponse.cid)
}

// string consumer_tag = 2;
inline void basicConsumeResponse::clear_consumer_tag() {
  consumer_tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeResponse::consumer_tag() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeResponse.consumer_tag)
  return _internal_consumer_tag();
}
inline void basicConsumeResponse::set_consumer_tag(const std::string& value) {
  _internal_set_consumer_tag(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeResponse.consumer_tag)
}
inline std::string* basicConsumeResponse::mutable_consumer_tag() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeResponse.consumer_tag)
  return _internal_mutable_consumer_tag();
}
inline const std::string& basicConsumeResponse::_internal_consumer_tag() const {
  return consumer_tag_.Get();
}
inline void basicConsumeResponse::_internal_set_consumer_tag(const std::string& value) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeResponse::set_consumer_tag(std::string&& value) {
  
  consumer_tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeResponse.consumer_tag)
}
inline void basicConsumeResponse::set_consumer_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeResponse.consumer_tag)
}
inline void basicConsumeResponse::set_consumer_tag(const char* value,
    size_t size) {
  
  consumer_tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeResponse.consumer_tag)
}
inline std::string* basicConsumeResponse::_internal_mutable_consumer_tag() {
  
  return consumer_tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeResponse::release_consumer_tag() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeResponse.consumer_tag)
  return consumer_tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeResponse::set_allocated_consumer_tag(std::string* consumer_tag) {
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeResponse.consumer_tag)
}
inline std::string* basicConsumeResponse::unsafe_arena_release_consumer_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeResponse.consumer_tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return consumer_tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeResponse::unsafe_arena_set_allocated_consumer_tag(
    std::string* consumer_tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (consumer_tag != nullptr) {
    
  } else {
    
  }
  consumer_tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      consumer_tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeResponse.consumer_tag)
}

// string body = 3;
inline void basicConsumeResponse::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicConsumeResponse::body() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeResponse.body)
  return _internal_body();
}
inline void basicConsumeResponse::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicConsumeResponse.body)
}
inline std::string* basicConsumeResponse::mutable_body() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeResponse.body)
  return _internal_mutable_body();
}
inline const std::string& basicConsumeResponse::_internal_body() const {
  return body_.Get();
}
inline void basicConsumeResponse::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicConsumeResponse::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicConsumeResponse.body)
}
inline void basicConsumeResponse::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicConsumeResponse.body)
}
inline void basicConsumeResponse::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicConsumeResponse.body)
}
inline std::string* basicConsumeResponse::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicConsumeResponse::release_body() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeResponse.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicConsumeResponse::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeResponse.body)
}
inline std::string* basicConsumeResponse::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicConsumeResponse.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicConsumeResponse::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeResponse.body)
}

// .zkpmq.BasicProperties properties = 4;
inline bool basicConsumeResponse::_internal_has_properties() const {
  return this != internal_default_instance() && properties_ != nullptr;
}
inline bool basicConsumeResponse::has_properties() const {
  return _internal_has_properties();
}
inline const ::zkpmq::BasicProperties& basicConsumeResponse::_internal_properties() const {
  const ::zkpmq::BasicProperties* p = properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::zkpmq::BasicProperties*>(
      &::zkpmq::_BasicProperties_default_instance_);
}
inline const ::zkpmq::BasicProperties& basicConsumeResponse::properties() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicConsumeResponse.properties)
  return _internal_properties();
}
inline void basicConsumeResponse::unsafe_arena_set_allocated_properties(
    ::zkpmq::BasicProperties* properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  properties_ = properties;
  if (properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicConsumeResponse.properties)
}
inline ::zkpmq::BasicProperties* basicConsumeResponse::release_properties() {
  auto temp = unsafe_arena_release_properties();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zkpmq::BasicProperties* basicConsumeResponse::unsafe_arena_release_properties() {
  // @@protoc_insertion_point(field_release:zkpmq.basicConsumeResponse.properties)
  
  ::zkpmq::BasicProperties* temp = properties_;
  properties_ = nullptr;
  return temp;
}
inline ::zkpmq::BasicProperties* basicConsumeResponse::_internal_mutable_properties() {
  
  if (properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::zkpmq::BasicProperties>(GetArena());
    properties_ = p;
  }
  return properties_;
}
inline ::zkpmq::BasicProperties* basicConsumeResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicConsumeResponse.properties)
  return _internal_mutable_properties();
}
inline void basicConsumeResponse::set_allocated_properties(::zkpmq::BasicProperties* properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties_);
  }
  if (properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(properties)->GetArena();
    if (message_arena != submessage_arena) {
      properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, properties, submessage_arena);
    }
    
  } else {
    
  }
  properties_ = properties;
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicConsumeResponse.properties)
}

// -------------------------------------------------------------------

// basicCommonResponse

// string rid = 1;
inline void basicCommonResponse::clear_rid() {
  rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCommonResponse::rid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCommonResponse.rid)
  return _internal_rid();
}
inline void basicCommonResponse::set_rid(const std::string& value) {
  _internal_set_rid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCommonResponse.rid)
}
inline std::string* basicCommonResponse::mutable_rid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCommonResponse.rid)
  return _internal_mutable_rid();
}
inline const std::string& basicCommonResponse::_internal_rid() const {
  return rid_.Get();
}
inline void basicCommonResponse::_internal_set_rid(const std::string& value) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCommonResponse::set_rid(std::string&& value) {
  
  rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCommonResponse.rid)
}
inline void basicCommonResponse::set_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCommonResponse.rid)
}
inline void basicCommonResponse::set_rid(const char* value,
    size_t size) {
  
  rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCommonResponse.rid)
}
inline std::string* basicCommonResponse::_internal_mutable_rid() {
  
  return rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCommonResponse::release_rid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCommonResponse.rid)
  return rid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCommonResponse::set_allocated_rid(std::string* rid) {
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCommonResponse.rid)
}
inline std::string* basicCommonResponse::unsafe_arena_release_rid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCommonResponse.rid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCommonResponse::unsafe_arena_set_allocated_rid(
    std::string* rid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rid != nullptr) {
    
  } else {
    
  }
  rid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCommonResponse.rid)
}

// string cid = 2;
inline void basicCommonResponse::clear_cid() {
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& basicCommonResponse::cid() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCommonResponse.cid)
  return _internal_cid();
}
inline void basicCommonResponse::set_cid(const std::string& value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCommonResponse.cid)
}
inline std::string* basicCommonResponse::mutable_cid() {
  // @@protoc_insertion_point(field_mutable:zkpmq.basicCommonResponse.cid)
  return _internal_mutable_cid();
}
inline const std::string& basicCommonResponse::_internal_cid() const {
  return cid_.Get();
}
inline void basicCommonResponse::_internal_set_cid(const std::string& value) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void basicCommonResponse::set_cid(std::string&& value) {
  
  cid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zkpmq.basicCommonResponse.cid)
}
inline void basicCommonResponse::set_cid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:zkpmq.basicCommonResponse.cid)
}
inline void basicCommonResponse::set_cid(const char* value,
    size_t size) {
  
  cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zkpmq.basicCommonResponse.cid)
}
inline std::string* basicCommonResponse::_internal_mutable_cid() {
  
  return cid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* basicCommonResponse::release_cid() {
  // @@protoc_insertion_point(field_release:zkpmq.basicCommonResponse.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void basicCommonResponse::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zkpmq.basicCommonResponse.cid)
}
inline std::string* basicCommonResponse::unsafe_arena_release_cid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:zkpmq.basicCommonResponse.cid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void basicCommonResponse::unsafe_arena_set_allocated_cid(
    std::string* cid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zkpmq.basicCommonResponse.cid)
}

// bool ok = 3;
inline void basicCommonResponse::clear_ok() {
  ok_ = false;
}
inline bool basicCommonResponse::_internal_ok() const {
  return ok_;
}
inline bool basicCommonResponse::ok() const {
  // @@protoc_insertion_point(field_get:zkpmq.basicCommonResponse.ok)
  return _internal_ok();
}
inline void basicCommonResponse::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void basicCommonResponse::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:zkpmq.basicCommonResponse.ok)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zkpmq

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mq_5fproto_2eproto
